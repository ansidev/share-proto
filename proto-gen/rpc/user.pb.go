// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: rpc/user.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	message "share-proto/proto-gen/message"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_rpc_user_proto protoreflect.FileDescriptor

var file_rpc_user_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xcf, 0x02, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x5b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x11, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_rpc_user_proto_goTypes = []interface{}{
	(*message.AccessToken)(nil),                       // 0: message.AccessToken
	(*message.UpdateUserDataByAccessToken)(nil),       // 1: message.UpdateUserDataByAccessToken
	(*message.Credentials)(nil),                       // 2: message.Credentials
	(*message.UserData)(nil),                          // 3: message.UserData
	(*message.GetUserDataByAccessTokenResult)(nil),    // 4: message.GetUserDataByAccessTokenResult
	(*message.UpdateUserDataByAccessTokenResult)(nil), // 5: message.UpdateUserDataByAccessTokenResult
	(*message.LoginResult)(nil),                       // 6: message.LoginResult
	(*message.RegisterResult)(nil),                    // 7: message.RegisterResult
}
var file_rpc_user_proto_depIdxs = []int32{
	0, // 0: rpc.User.GetUserDataByAccessToken:input_type -> message.AccessToken
	1, // 1: rpc.User.UpdateUserDataByAccessToken:input_type -> message.UpdateUserDataByAccessToken
	2, // 2: rpc.User.UserLogin:input_type -> message.Credentials
	3, // 3: rpc.User.UserRegister:input_type -> message.UserData
	4, // 4: rpc.User.GetUserDataByAccessToken:output_type -> message.GetUserDataByAccessTokenResult
	5, // 5: rpc.User.UpdateUserDataByAccessToken:output_type -> message.UpdateUserDataByAccessTokenResult
	6, // 6: rpc.User.UserLogin:output_type -> message.LoginResult
	7, // 7: rpc.User.UserRegister:output_type -> message.RegisterResult
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_user_proto_init() }
func file_rpc_user_proto_init() {
	if File_rpc_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_user_proto_goTypes,
		DependencyIndexes: file_rpc_user_proto_depIdxs,
	}.Build()
	File_rpc_user_proto = out.File
	file_rpc_user_proto_rawDesc = nil
	file_rpc_user_proto_goTypes = nil
	file_rpc_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	GetUserDataByAccessToken(ctx context.Context, in *message.AccessToken, opts ...grpc.CallOption) (*message.GetUserDataByAccessTokenResult, error)
	UpdateUserDataByAccessToken(ctx context.Context, in *message.UpdateUserDataByAccessToken, opts ...grpc.CallOption) (*message.UpdateUserDataByAccessTokenResult, error)
	UserLogin(ctx context.Context, in *message.Credentials, opts ...grpc.CallOption) (*message.LoginResult, error)
	UserRegister(ctx context.Context, in *message.UserData, opts ...grpc.CallOption) (*message.RegisterResult, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserDataByAccessToken(ctx context.Context, in *message.AccessToken, opts ...grpc.CallOption) (*message.GetUserDataByAccessTokenResult, error) {
	out := new(message.GetUserDataByAccessTokenResult)
	err := c.cc.Invoke(ctx, "/rpc.User/GetUserDataByAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserDataByAccessToken(ctx context.Context, in *message.UpdateUserDataByAccessToken, opts ...grpc.CallOption) (*message.UpdateUserDataByAccessTokenResult, error) {
	out := new(message.UpdateUserDataByAccessTokenResult)
	err := c.cc.Invoke(ctx, "/rpc.User/UpdateUserDataByAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLogin(ctx context.Context, in *message.Credentials, opts ...grpc.CallOption) (*message.LoginResult, error) {
	out := new(message.LoginResult)
	err := c.cc.Invoke(ctx, "/rpc.User/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserRegister(ctx context.Context, in *message.UserData, opts ...grpc.CallOption) (*message.RegisterResult, error) {
	out := new(message.RegisterResult)
	err := c.cc.Invoke(ctx, "/rpc.User/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	GetUserDataByAccessToken(context.Context, *message.AccessToken) (*message.GetUserDataByAccessTokenResult, error)
	UpdateUserDataByAccessToken(context.Context, *message.UpdateUserDataByAccessToken) (*message.UpdateUserDataByAccessTokenResult, error)
	UserLogin(context.Context, *message.Credentials) (*message.LoginResult, error)
	UserRegister(context.Context, *message.UserData) (*message.RegisterResult, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) GetUserDataByAccessToken(context.Context, *message.AccessToken) (*message.GetUserDataByAccessTokenResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataByAccessToken not implemented")
}
func (*UnimplementedUserServer) UpdateUserDataByAccessToken(context.Context, *message.UpdateUserDataByAccessToken) (*message.UpdateUserDataByAccessTokenResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDataByAccessToken not implemented")
}
func (*UnimplementedUserServer) UserLogin(context.Context, *message.Credentials) (*message.LoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (*UnimplementedUserServer) UserRegister(context.Context, *message.UserData) (*message.RegisterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUserDataByAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserDataByAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.User/GetUserDataByAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserDataByAccessToken(ctx, req.(*message.AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserDataByAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.UpdateUserDataByAccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserDataByAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.User/UpdateUserDataByAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserDataByAccessToken(ctx, req.(*message.UpdateUserDataByAccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.User/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLogin(ctx, req.(*message.Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.User/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*message.UserData))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDataByAccessToken",
			Handler:    _User_GetUserDataByAccessToken_Handler,
		},
		{
			MethodName: "UpdateUserDataByAccessToken",
			Handler:    _User_UpdateUserDataByAccessToken_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _User_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/user.proto",
}
